{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Mutation } from 'react-apollo';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { CURRENT_USER_QUERY } from './wrappers/User';\nimport { STRIPE_PUBLIC_KEY } from '../config';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport SickButton from './styles/SickButton';\nconst UNSUBSCRIBE_USER_MUTATION = gql`\n  mutation UNSUBSCRIBE_USER_MUTATION($planId: String!) {\n    unsubscribe(planId: $planId) {\n      id\n      subscriptionId\n      plansSubscribed\n    }\n  }\n`;\nexport default class Unsubscribe extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onClick\", async (planId, unsubscribe) => {\n      const res = await unsubscribe({\n        variables: {\n          planId: planId\n        }\n      });\n    });\n  }\n\n  render() {\n    let {\n      plan: {\n        planId,\n        description\n      }\n    } = this.props;\n    return __jsx(Mutation, {\n      mutation: UNSUBSCRIBE_USER_MUTATION,\n      refetchQueries: [{\n        query: CURRENT_USER_QUERY\n      }]\n    }, (unsubscribe, {\n      loading,\n      error\n    }) => __jsx(\"div\", null, __jsx(\"h2\", null, planId), __jsx(SickButton, {\n      disabled: loading,\n      onClick: () => this.onClick(planId, unsubscribe)\n    }, \"Unsubscrib\", loading ? 'ing' : 'e')));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}