{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Mutation } from 'react-apollo';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { CURRENT_USER_QUERY } from './wrappers/User';\nimport { STRIPE_PUBLIC_KEY } from '../config';\nimport SickButton from './styles/SickButton';\nimport gql from 'graphql-tag';\nconst SUBSCRIBE_USER_MUTATION = gql`\n  mutation SUBSCRIBE_USER_MUTATION($tokenId: String!, $planId: String!) {\n    subscribe(tokenId: $tokenId, planId: $planId) {\n      message\n    }\n  }\n`;\nexport default class Subscribe extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onToken\", async (token, planId, subscribe) => {\n      var {\n        id\n      } = token;\n      const res = await subscribe({\n        variables: {\n          tokenId: id,\n          planId: planId\n        }\n      });\n    });\n  }\n\n  render() {\n    let {\n      plan: {\n        planId,\n        description\n      }\n    } = this.props;\n    return __jsx(Mutation, {\n      mutation: SUBSCRIBE_USER_MUTATION,\n      refetchQueries: [{\n        query: CURRENT_USER_QUERY\n      }]\n    }, (subscribe, {\n      loading,\n      error\n    }) => __jsx(\"div\", null, __jsx(\"h2\", null, planId), __jsx(StripeCheckout, {\n      name: planId,\n      description: description,\n      token: token => this.onToken(token, planId, subscribe),\n      stripeKey: STRIPE_PUBLIC_KEY\n    }, __jsx(SickButton, {\n      disabled: loading\n    }, \"Subscrib\", loading ? 'ing' : 'e'))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}